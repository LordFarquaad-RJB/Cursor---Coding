{"version":3,"file":"TrapSystem-v2.js","sources":["../src/trap-utils.js","../src/index.js"],"sourcesContent":["// src/trap-utils.js\n// Shared helper functions used across TrapSystem modules.\n// Initially contains only a subset (quick-win helpers) – we will migrate\n// the rest of the giant utils object here piece-by-piece.\n\n/* eslint-disable no-console */\n\nexport function log(message, type = 'info') {\n  const prefix = {\n    info: '📜',\n    error: '❌',\n    success: '✅',\n    warning: '⚠️',\n    debug: '🔍'\n  }[type] || '📜';\n  console.log(`${prefix} TrapSystem: ${message}`);\n}\n\n// Quick-win utility #1 – centralised trap-token validation\nexport function validateTrapToken(token, actionName = 'action') {\n  if (!token) {\n    log(`Error: No token supplied for ${actionName}.`, 'error');\n    return false;\n  }\n  if (!globalThis.TrapSystem || !globalThis.TrapSystem.utils || typeof globalThis.TrapSystem.utils.isTrap !== 'function') {\n    // During early bootstrap the monolith may not be loaded. We simply assume OK.\n    return true;\n  }\n  if (!globalThis.TrapSystem.utils.isTrap(token)) {\n    log(`Error: Selected token is not a trap. (${actionName})`, 'error');\n    return false;\n  }\n  return true;\n}\n\n// Quick-win utility #2 – parameter length guard for chat commands\nexport function validateCommandArgs(args, minLength, commandName = 'command') {\n  if (args.length < minLength) {\n    log(`Error: Missing parameters for ${commandName}.`, 'error');\n    return false;\n  }\n  return true;\n}\n\nexport const TrapUtils = {\n  log,\n  validateTrapToken,\n  validateCommandArgs\n};\n\nexport default TrapUtils;","// Entry point that stitches the modular files together.\n// For now we export an empty scaffold TrapSystem with utilities.\n\nimport * as TrapUtils from './trap-utils.js';\n\n// Placeholder imports – these modules will gradually be filled out.\nimport './trap-core.js';\nimport './trap-detection.js';\nimport './trap-interaction.js';\nimport './trap-macros.js';\nimport './trap-ui.js';\n\nconst TrapSystem = {\n  utils: TrapUtils,\n  // Namespaces to be wired up in later phases\n  core: {},\n  detection: {},\n  interaction: {},\n  macros: {},\n  ui: {}\n};\n\n// Expose globally so Roll20 can see it after bundling.\nglobalThis.TrapSystem = TrapSystem;\n\nconsole.log('📦 TrapSystem v2 scaffold loaded');\n\nexport { TrapSystem };"],"names":["TrapUtils"],"mappings":";;;EAAA;EACA;EACA;EACA;;EAEA;;EAEO,SAAS,GAAG,CAAC,OAAO,EAAE,IAAI,GAAG,MAAM,EAAE;EAC5C,EAAE,MAAM,MAAM,GAAG;EACjB,IAAI,IAAI,EAAE,IAAI;EACd,IAAI,KAAK,EAAE,GAAG;EACd,IAAI,OAAO,EAAE,GAAG;EAChB,IAAI,OAAO,EAAE,IAAI;EACjB,IAAI,KAAK,EAAE;EACX,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI;EACjB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC;EACjD;;EAEA;EACO,SAAS,iBAAiB,CAAC,KAAK,EAAE,UAAU,GAAG,QAAQ,EAAE;EAChE,EAAE,IAAI,CAAC,KAAK,EAAE;EACd,IAAI,GAAG,CAAC,CAAC,6BAA6B,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;EAC/D,IAAI,OAAO,KAAK;EAChB;EACA,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,KAAK,IAAI,OAAO,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,KAAK,UAAU,EAAE;EAC1H;EACA,IAAI,OAAO,IAAI;EACf;EACA,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;EAClD,IAAI,GAAG,CAAC,CAAC,sCAAsC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;EACxE,IAAI,OAAO,KAAK;EAChB;EACA,EAAE,OAAO,IAAI;EACb;;EAEA;EACO,SAAS,mBAAmB,CAAC,IAAI,EAAE,SAAS,EAAE,WAAW,GAAG,SAAS,EAAE;EAC9E,EAAE,IAAI,IAAI,CAAC,MAAM,GAAG,SAAS,EAAE;EAC/B,IAAI,GAAG,CAAC,CAAC,8BAA8B,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;EACjE,IAAI,OAAO,KAAK;EAChB;EACA,EAAE,OAAO,IAAI;EACb;;EAEO,MAAM,SAAS,GAAG;EACzB,EAAE,GAAG;EACL,EAAE,iBAAiB;EACnB,EAAE;EACF,CAAC;;;;;;;;;;;EChDD;EACA;;;AAWK,QAAC,UAAU,GAAG;EACnB,EAAE,KAAK,EAAEA,WAAS;EAClB;EACA,EAAE,IAAI,EAAE,EAAE;EACV,EAAE,SAAS,EAAE,EAAE;EACf,EAAE,WAAW,EAAE,EAAE;EACjB,EAAE,MAAM,EAAE,EAAE;EACZ,EAAE,EAAE,EAAE;EACN;;EAEA;EACA,UAAU,CAAC,UAAU,GAAG,UAAU;;EAElC,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC;;;;;;;;;;"}